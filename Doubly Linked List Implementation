package weblab;

class DLList {
  class Node {
    // Each node object has these three fields
    private Object element;
    private Node previous;
    private Node next;

    // Constructor: Creates a Node object with element = e, previous = p and next = n
    Node(Object e, Node p, Node n) {
      element = e;
      previous = p;
      next = n;
    }

    // This function gets Object e as input and sets e as the element of the Node
    public void setElement(Object e) {
      element = e;
    }

    // This function returns the element variable of the Node
    public Object getElement() {
      return element;
    }

    // This function gets Node n as input and sets the next variable of the current Node object as n.
    public void setNext(Node n) {
      next = n;
    }

    // This function returns the next Node
    public Node getNext() {
      return next;
    }

    // This function gets Node p as input and sets the previous variable of the current Node object as p.
    public void setPrevious(Node p) {
      previous = p;
    }

    // This function returns the previous Node
    public Node getPrevious() {
      return previous;
    }
  }

  // Each object in DLList has one field head, which points to the starting Node of DLList.
  private Node head;
  // Each object in DLList has one field tail, which points to the final Node of DLList.
  private Node tail;

  /**
   * Constructor: initialises the head and tail fields as null
   */
  public DLList() {
    head = null;
    tail = null;
  }

  /**
   * @return The element in the head Node of the DLL
   */
  public Object getHead() {
    return head.getElement();
  }

  /**
   * @return The element in the tail Node of the DLL
   */
  public Object getTail() {
    return tail.getElement();
  }

  /**
   * Adds element e in a new Node to the head of the list.
   *
   * @param e
   *     The element to add.
   */
  public void addFirst(Object e) {
    // TODO
  Node head1 = new Node(e, null, head);
 if(head!=null){
   head.setPrevious(head1);
   head1.setNext(head);
 }
 head=head1;
 if(tail==null){
   tail= head1;
 }
 
  }
  

  /**
   * Remove the first Node in the list and return its element.
   *
   * @return The element of the head Node. If the list is empty, this method returns null.
   */
  public Object removeFirst() {
    // TODO
    if (head == null)
      return null;
    else {
      Node newHead = head.getNext();
      Object removed = getHead();
      
      if (newHead != null)
        newHead.setPrevious(null);
      
      head = newHead;
      return removed;
    }
  }

  /**
   * Adds element e in a new Node to the tail of the list.
   *
   * @param e
   *     The element to add.
   */
  public void addLast(Object e) {
    // TODO
     Node tail1 = new Node(e, tail, null);
 if(tail!=null){
   tail.setNext(tail1);
   tail1.setPrevious(tail);
 }
tail=tail1;
 if(head==null){
   head= tail1;
 }

  }

  /**
   * Remove the last Node in the list and return its element.
   *
   * @return The element of the tail Node. If the list is empty, this method returns null.
   */
  public Object removeLast() {
  if (tail == null)
      return null;
    else {
      Node newTail = tail.getPrevious();
      Object removed = getTail();
      
      if (newTail != null)
        newTail.setNext(null);
      
      tail = newTail;
      return removed;
    }
  }

  /**
   * @return the number of Nodes in the list
   */
  public int size() {
    // TODO
    int size = 0;
    Node node = head;
    while(node != null) {
      size++;
      node = node.getNext();
    }
    return size;
    
  }

  /**
   * Adds element e in a new Node which is inserted at position pos.
   * The list is zero indexed, so the first element in the list corresponds to position 0.
   * This also means that `addAtPosition(0, e)` has the same effect as `addFirst(e)`.
   * If there is no Node in position pos, this method adds it to the last position.
   *
   * @param pos
   *     The position to insert the element at.
   * @param e
   *     The element to add.
   */
  public void addAtPosition(int pos, Object e) {
    // TODO
    int size = size();
    if (pos == 0)
      addFirst(e);
    else if (pos >= size)
      addLast(e);
    else {
      Node node = head.getNext();
      int i = 1;
      while (i != pos) {
        node = node.getNext();
        i++;
      }
      Node newNode = new Node(e, node.getPrevious(), node);
      node.getPrevious().setNext(newNode);
      node.setPrevious(newNode);
    }
  }

  /**
   * Remove Node at position pos and return its element.
   * The list is zero indexed, so the first element in the list corresponds to position 0.
   * This also means that `removeFromPosition(0)` has the same effect as `removeFirst()`.
   *
   * @param pos
   *     The position to remove the Node from.
   * @return The element of the Node in position pos. If there is no Node in position pos, this method returns null.
   */
  public Object removeFromPosition(int pos) {
    // TODO
     int size = size();
    if (pos == 0)
      return removeFirst();
    else if (pos == size - 1)
      return removeLast();
    else if ( pos > size - 1)
      return null;
    else {
      Node node = head.getNext();
      int i = 1;
      while (i != pos) {
        node = node.getNext();
        i++;
      }
      Object removed = node.getElement();
      node.getPrevious().setNext(node.getNext());
      node.getNext().setPrevious(node.getPrevious());
      return removed;
    }
  }

  /**
   * @return A new DLL that contains the elements of the current one in reversed order.
   */
  public DLList reverse() {
    // TODO
    DLList newList = new DLList();
    Node n = tail;
    while(n!=null){
      newList.addLast(n.getElement());
      n = n.getPrevious();
    }
    return newList;
  }
}
//
