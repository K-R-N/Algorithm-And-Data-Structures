import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

class Solution {
  /**
   * The recursive helper function that performs the depth-first search.
   * @param g the graph
   * @param prev the vertex via which we have reached the vertex u (can be null)
   * @param u the vertex we are currently visiting
   * @param known the vertexes that we have already visited
   */
public static boolean hasCycle(Graph g, Vertex prev, Vertex u, Set<Vertex> known) {
    List<Vertex> neigh = g.getNeighbours(u); //makes list of neighbours of vertex u
    
    if (known.contains(u)) { return true;   } //checks if the set with know vertex contains u
    
    known.add(u); //add u to the set
    
    for (Vertex v : neigh) //check for neighbour vertexes
    {
      if (prev == v) continue; //in case of self-loop go to next iteration of this loop
      
      boolean check = hasCycle(g, u, v, known); //check if neighbour forms cycle
      
      if (check)  return true; 
    }
    
    return false;
  }

  public static boolean hasCycle(Graph g) {
    Set<Vertex> known = new TreeSet<>();
    Iterator<Vertex> it = g.getAllVertices().iterator(); //create iterator to get vertexes
    
    while (known.size() < g.getAllVertices().size())    //loop to see all vertices
    {
      Vertex next = it.next();                          //get next vertex
      
      if (!known.contains(next))              
      {
        boolean check = hasCycle(g, null, next, known);
        if (check)  return true;
      }
    }
    return false;
  }
}

/**
 * DO NOT MODIFY
 */
interface Vertex extends Comparable<Vertex> {
  /**
   * @return the id of the vertex
   */
  public int getId();
}

/**
 * Interface for a generic graph. You may assume that our implementation is an
 * undirected graph.
 */
interface Graph {
  /**
   * @param id
   *            to look for a vertex by.
   * @return the vertex or null if not found.
   */

  public Vertex getVertexById(int id);
  /**
   * Returns the neighbours in a sorted collection by id
   *
   * @param v
   *            node to get the neighbours of.
   * @return sorted collection of neighbours.
   */
  public List<Vertex> getNeighbours(Vertex v);

  /**
   * @return an unsorted collection of all vertices in the graph.
   */
  public Collection<Vertex> getAllVertices();
}
/*
! Pay attention to what is imported at the top !
------------------------------------------------------------------------------------------------------------

Implement the method boolean hasCycle(Graph g) that determines whether there is a cycle in the undirected graph g.

REQUIREMENTS:

    Your solution should be able to handle graphs that are not connected.
    Your solution should be able to handle graphs with self-loops (self-loops are cycles).
    Your solution should not be able to handle graphs with parallel edges.
    You should make use of a depth-first search, for which you need to implement the recursive helping function boolean hasCycle(Graph g, Vertex prev, Vertex u, Set<Vertex> known).

Hint: note that a graph has a cycle if a back edge occurs during the depth-first search.

Below the skeleton code (after DO NOT MODIFY), we provide you the interfaces for Vertex and Graph, which have full implementations in the hidden library code.

With this implementation, you cannot label nodes or edges. Instead, you need to maintain the colored nodes in a set. This set can be instantiated with a TreeSet, which stores the elements of a set in a height-balanced search tree. To add a node v to the set known, you call known.add(v). To check if a vertex is already contained in the set known, you call known.contains(v).

*/




