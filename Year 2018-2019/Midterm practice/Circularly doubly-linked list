class CDLList<T> {
  class Node {
    // Each Node object has these three fields
    private T element;
    private Node previous;
    private Node next;
 
    // Constructor: Creates a Node object with element = e, previous = p and next = n
    Node(T e, Node p, Node n) {
      element = e;
      previous = p;
      next = n;
    }
 
    // This function gets T e as input and sets e as the element of the Node
    public void setElement(T e) {
      element = e;
    }
 
    // This function returns the element variable of the Node
    public T getElement() {
      return element;
    }
 
    // This function gets Node n as input and sets the next variable of the current Node object as n.
    public void setNext(Node n) {
      next = n;
    }
 
    // This function returns the next Node
    public Node getNext() {
      return next;
    }
 
    // This function gets Node p as input and sets the previous variable of the current Node object as p.
    public void setPrevious(Node p) {
      previous = p;
    }
 
    // This function returns the previous Node
    public Node getPrevious() {
      return previous;
    }
  }
 
  // Each object in CDLList has one field head, which points to the starting Node of CDLList.
  private Node head;
 
  /**
   * Constructor: initialises the head field as null
   */
  public CDLList() {
    head = null;
  }
 
  /**
   * @return The element in the first Node of this CDLL. If the list is empty, this method returns null.
   */
  public T getFirst() {
    if(head == null) return null;
    return head.getElement();
  }
 
  /**
   * Adds element e in a new Node to the head of the list.
   *
   * @param e
   *     The element to add.
   */
  public void addFirst(T e) {
    if(head == null) {
      head = new Node(e, null, null);
      head.next = head;
      head.previous = head;
    }else{
      head = addAfter(e, head.previous);
    }
  }
 
  /**
   * Remove the first Node in the list and return its element.
   *
   * @return The element of the first Node. If the list is empty, this method returns null.
   */
  public T removeFirst() {
    if(head == null) return null;
    if(head.next == head){
      Node node = head;
      head = null;
      return node.getElement();
    }
    head = head.next;
    return remove(head.previous);
  }
 
  /**
   * @return The element in the last Node of the CDLL. If the list is empty, this method returns null.
   */
  public T getLast() {
    if(head == null) return null;
    return head.previous.getElement();
  }
 
  /**
   * Adds element e in a new Node to the end of the list.
   *
   * @param e
   *     The element to add.
   */
  public void addLast(T e) {
    if(head == null) {
      head = new Node(e, null, null);
      head.next = head;
      head.previous = head;
    }else{
      addAfter(e, head.previous);
    }
  }
 
  /**
   * Remove the last Node in the list and return its element.
   *
   * @return The element of the last Node. If the list is empty, this method returns null.
   */
  public T removeLast() {
    if(head == null) return null;
    if(head.next == head){
      Node node = head;
      head = null;
      return node.getElement();
    }
    return remove(head.previous);
  }
 
  private Node addAfter(T el, Node after) {
    Node node = new Node(el, after, after.next);
    after.next.previous = node;
    after.next = node;
    return node;
  }
 
  private T remove(Node node) {
    node.previous.next = node.next;
    node.next.previous = node.previous;
    return node.getElement();
  }
 
  /**
   * Moves the head reference to the next element.
   */
  public void rotateForward() {
    if(head == null) return;
    head = head.next;
  }
 
  /**
   * Moves the head reference to the previous element.
   */
  public void rotateBackward() {
    if(head == null) return;
    head = head.previous;
  }
}
//
