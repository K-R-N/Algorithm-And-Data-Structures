class Solution {
  public static void stableSort(String[][] table, int column) {
    if(table.length == 0){
      return;
    }
    int c = column;
		int n = table.length;
		String[] temp = null;
		  for (int i = 0; i < n; i++) {
    			for (int j = 1; j < (n - i); j++) {
    			  
    				if (table[j - 1][c].compareTo(table[j][c]) > 0) {
    				  
    					temp = table[j - 1];
    					table[j - 1] = table[j];
    					table[j] = temp;
    				}
    			}
    		}
    
 
    
  }
}
/*
In this assignment, you will implement a stable sorting algorithm that can be used to sort tables of Strings.

As input, you will receive a two-dimensional array (a table) of Strings and the index of the “column” you should sort. You should sort the rows by the values in the indicated column.

You can see the first index as a row index, and the second index as a column index. For example, the following Java array and table correspond with each other:

String[][] table = {
  {"a", "b"},
  {"c", "d"}
};

    0   1
  +---+---+
0 | a | b |
  +---+---+
1 | c | d |
  +---+---+

To continue on this example, table[0][1] will yield the value "b", since it’s the item in row 0 and column 1.

You are allowed to implement any stable sorting algorithm with a worst-case time complexity of O(n2)
.
(Remember that this includes algorithms with a complexity of O(nlogn).)
*/
